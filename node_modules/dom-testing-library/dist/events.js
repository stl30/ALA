'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var eventMap = {
  // Clipboard Events
  copy: {
    EventType: 'ClipboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  cut: {
    EventType: 'ClipboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  paste: {
    EventType: 'ClipboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // Composition Events
  compositionEnd: {
    EventType: 'CompositionEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  compositionStart: {
    EventType: 'CompositionEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  compositionUpdate: {
    EventType: 'CompositionEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  // Keyboard Events
  keyDown: {
    EventType: 'KeyboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  keyPress: {
    EventType: 'KeyboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  keyUp: {
    EventType: 'KeyboardEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // Focus Events
  focus: {
    EventType: 'FocusEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  blur: {
    EventType: 'FocusEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  // Form Events
  change: {
    EventType: 'InputEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  input: {
    EventType: 'InputEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  invalid: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: true }
  },
  submit: {
    EventType: 'Event',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // Mouse Events
  click: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true, button: 0 }
  },
  contextMenu: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  dblClick: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  drag: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  dragEnd: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  dragEnter: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  dragExit: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  dragLeave: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  dragOver: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  dragStart: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  drop: {
    EventType: 'DragEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseDown: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseEnter: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseLeave: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseMove: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseOut: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseOver: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  mouseUp: {
    EventType: 'MouseEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // Selection Events
  select: {
    EventType: 'Event',
    defaultInit: { bubbles: true, cancelable: false }
  },
  // Touch Events
  touchCancel: {
    EventType: 'TouchEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  touchEnd: {
    EventType: 'TouchEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  touchMove: {
    EventType: 'TouchEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  touchStart: {
    EventType: 'TouchEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // UI Events
  scroll: {
    EventType: 'UIEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  // Wheel Events
  wheel: {
    EventType: 'WheelEvent',
    defaultInit: { bubbles: true, cancelable: true }
  },
  // Media Events
  abort: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  canPlay: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  canPlayThrough: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  durationChange: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  emptied: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  encrypted: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  ended: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  // error: {
  //   EventType: Event,
  //   defaultInit: {bubbles: false, cancelable: false},
  // },
  loadedData: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  loadedMetadata: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  loadStart: {
    EventType: 'ProgressEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  pause: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  play: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  playing: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  progress: {
    EventType: 'ProgressEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  rateChange: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  seeked: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  seeking: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  stalled: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  suspend: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  timeUpdate: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  volumeChange: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  waiting: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  // Image Events
  load: {
    EventType: 'UIEvent',
    defaultInit: { bubbles: false, cancelable: false }
  },
  error: {
    EventType: 'Event',
    defaultInit: { bubbles: false, cancelable: false }
  },
  // Animation Events
  animationStart: {
    EventType: 'AnimationEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  animationEnd: {
    EventType: 'AnimationEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  animationIteration: {
    EventType: 'AnimationEvent',
    defaultInit: { bubbles: true, cancelable: false }
  },
  // Transition Events
  transitionEnd: {
    EventType: 'TransitionEvent',
    defaultInit: { bubbles: true, cancelable: true }
  }
};

var eventAliasMap = {
  doubleClick: 'dblClick'
};

function fireEvent(element, event) {
  return element.dispatchEvent(event);
}

Object.entries(eventMap).forEach(function (_ref) {
  var key = _ref[0],
      _ref$ = _ref[1],
      EventType = _ref$.EventType,
      defaultInit = _ref$.defaultInit;

  var eventName = key.toLowerCase();

  fireEvent[key] = function (node, init) {
    var eventInit = _extends({}, defaultInit, init);
    var _eventInit$target = eventInit.target;
    _eventInit$target = _eventInit$target === undefined ? {} : _eventInit$target;

    var value = _eventInit$target.value,
        files = _eventInit$target.files,
        targetProperties = _objectWithoutProperties(_eventInit$target, ['value', 'files']);

    Object.assign(node, targetProperties);
    if (value !== undefined) {
      setNativeValue(node, value);
    }
    if (files !== undefined) {
      // input.files is a read-only property so this is not allowed:
      // input.files = [file]
      // so we have to use this workaround to set the property
      Object.defineProperty(node, 'files', {
        value: files
      });
    }
    var window = node.ownerDocument.defaultView;
    var EventConstructor = window[EventType] || window.Event;
    var event = new EventConstructor(eventName, eventInit);
    return fireEvent(node, event);
  };
});

// function written after some investigation here:
// https://github.com/facebook/react/issues/10135#issuecomment-401496776
function setNativeValue(element, value) {
  var _ref2 = Object.getOwnPropertyDescriptor(element, 'value') || {},
      valueSetter = _ref2.set;

  var prototype = Object.getPrototypeOf(element);

  var _ref3 = Object.getOwnPropertyDescriptor(prototype, 'value') || {},
      prototypeValueSetter = _ref3.set;

  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } /* istanbul ignore next (I don't want to bother) */else if (valueSetter) {
      valueSetter.call(element, value);
    } else {
      throw new Error('The given element does not have a value setter');
    }
}

Object.entries(eventAliasMap).forEach(function (_ref4) {
  var aliasKey = _ref4[0],
      key = _ref4[1];

  fireEvent[aliasKey] = function () {
    return fireEvent[key].apply(fireEvent, arguments);
  };
});

exports.fireEvent = fireEvent;

/* eslint complexity:["error", 9] */