'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function fuzzyMatches(textToMatch, node, matcher) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref$collapseWhitespa = _ref.collapseWhitespace,
      collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa,
      _ref$trim = _ref.trim,
      trim = _ref$trim === undefined ? true : _ref$trim;

  if (typeof textToMatch !== 'string') {
    return false;
  }
  var normalizedText = normalize(textToMatch, { trim, collapseWhitespace });
  if (typeof matcher === 'string') {
    return normalizedText.toLowerCase().includes(matcher.toLowerCase());
  } else if (typeof matcher === 'function') {
    return matcher(normalizedText, node);
  } else {
    return matcher.test(normalizedText);
  }
}

function matches(textToMatch, node, matcher) {
  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref2$collapseWhitesp = _ref2.collapseWhitespace,
      collapseWhitespace = _ref2$collapseWhitesp === undefined ? true : _ref2$collapseWhitesp,
      _ref2$trim = _ref2.trim,
      trim = _ref2$trim === undefined ? true : _ref2$trim;

  if (typeof textToMatch !== 'string') {
    return false;
  }
  var normalizedText = normalize(textToMatch, { trim, collapseWhitespace });
  if (typeof matcher === 'string') {
    return normalizedText === matcher;
  } else if (typeof matcher === 'function') {
    return matcher(normalizedText, node);
  } else {
    return matcher.test(normalizedText);
  }
}

function normalize(text, _ref3) {
  var trim = _ref3.trim,
      collapseWhitespace = _ref3.collapseWhitespace;

  var normalizedText = text;
  normalizedText = trim ? normalizedText.trim() : normalizedText;
  normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, ' ') : normalizedText;
  return normalizedText;
}

exports.fuzzyMatches = fuzzyMatches;
exports.matches = matches;