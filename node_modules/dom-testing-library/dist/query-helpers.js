'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByAttribute = exports.queryAllByAttribute = exports.firstResultOrNull = exports.getElementError = exports.debugDOM = undefined;

var _prettyDom = require('./pretty-dom');

var _matches = require('./matches');

/* eslint-disable complexity */
function debugDOM(htmlElement) {
  var limit = process.env.DEBUG_PRINT_LIMIT || 7000;
  var inNode = typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
  var window = htmlElement.ownerDocument.defaultView;
  var inCypress = typeof window !== 'undefined' && window.Cypress;
  /* istanbul ignore else */
  if (inCypress) {
    return '';
  } else if (inNode) {
    return (0, _prettyDom.prettyDOM)(htmlElement, limit);
  } else {
    return (0, _prettyDom.prettyDOM)(htmlElement, limit, { highlight: false });
  }
}
/* eslint-enable complexity */

function getElementError(message, container) {
  return new Error([message, debugDOM(container)].filter(Boolean).join('\n\n'));
}

function firstResultOrNull(queryFunction) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var result = queryFunction.apply(undefined, args);
  if (result.length === 0) return null;
  return result[0];
}

function queryAllByAttribute(attribute, container, text) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref$exact = _ref.exact,
      exact = _ref$exact === undefined ? true : _ref$exact,
      _ref$collapseWhitespa = _ref.collapseWhitespace,
      collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa,
      _ref$trim = _ref.trim,
      trim = _ref$trim === undefined ? true : _ref$trim;

  var matcher = exact ? _matches.matches : _matches.fuzzyMatches;
  var matchOpts = { collapseWhitespace, trim };
  return Array.from(container.querySelectorAll(`[${attribute}]`)).filter(function (node) {
    return matcher(node.getAttribute(attribute), node, text, matchOpts);
  });
}

function queryByAttribute() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return firstResultOrNull.apply(undefined, [queryAllByAttribute].concat(args));
}

exports.debugDOM = debugDOM;
exports.getElementError = getElementError;
exports.firstResultOrNull = firstResultOrNull;
exports.queryAllByAttribute = queryAllByAttribute;
exports.queryByAttribute = queryByAttribute;