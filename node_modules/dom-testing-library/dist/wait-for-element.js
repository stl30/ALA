'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForElement = undefined;

var _mutationobserverShim = require('@sheerun/mutationobserver-shim');

var _mutationobserverShim2 = _interopRequireDefault(_mutationobserverShim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function waitForElement(callback) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$container = _ref.container,
      container = _ref$container === undefined ? getDocument() : _ref$container,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 4500 : _ref$timeout,
      _ref$mutationObserver = _ref.mutationObserverOptions,
      mutationObserverOptions = _ref$mutationObserver === undefined ? {
    subtree: true,
    childList: true,
    attributes: true,
    characterData: true
  } : _ref$mutationObserver;

  return new Promise(function (resolve, reject) {
    if (typeof callback !== 'function') {
      reject('waitForElement requires a callback as the first parameter');
    }
    var lastError = void 0;
    var timer = setTimeout(onTimeout, timeout);
    /* istanbul ignore next */
    var MutationObserverConstructor = typeof window !== 'undefined' && typeof window.MutationObserver !== 'undefined' ? window.MutationObserver : _mutationobserverShim2.default;
    var observer = new MutationObserverConstructor(onMutation);
    observer.observe(container, mutationObserverOptions);
    function onDone(error, result) {
      clearTimeout(timer);
      setImmediate(function () {
        return observer.disconnect();
      });
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function onMutation() {
      try {
        var result = callback();
        if (result) {
          onDone(null, result);
        }
        // If `callback` returns falsy value, wait for the next mutation or timeout.
      } catch (error) {
        // Save the callback error to reject the promise with it.
        lastError = error;
        // If `callback` throws an error, wait for the next mutation or timeout.
      }
    }
    function onTimeout() {
      onDone(lastError || new Error('Timed out in waitForElement.'), null);
    }
    onMutation();
  });
}

function getDocument() {
  /* istanbul ignore if */
  if (typeof window === 'undefined') {
    throw new Error('Could not find default container');
  }
  return window.document;
}

exports.waitForElement = waitForElement;