{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.js"],"names":["_","require","reporter","resolveModuleExports","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","difference","map","e","exportName","pluginName","name","pluginVersion","version","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","bady","similarities","findBestMatch","isDefaultPlugin","badExportsMigrationMap","modifyWebpackConfig","replacement","migrationLink","wrapRootComponent","isOldAPI","Object","keys","includes","bestMatch","rating","target","handleBadExports","isBad","toPairs","badItem","entries","length","console","log","collatePluginAPIs","flattenedPlugins","allAPIs","node","browser","ssr","apiToPlugins","reduce","acc","value","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","pluginBrowserExports","pluginSSRExports","intersection","nodeAPI","push","browserAPI","ssrAPI","handleMultipleReplaceRenderers","replaceRenderer","rendererPlugins","warn","join","error","process","env","NODE_ENV","exit","ignorable","messages","fp","i","skipSSR","m","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\n\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst resolveModuleExports = require(`../resolve-module-exports`)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs\n  `\n\n  badExports.forEach(bady => {\n    message += `\\n\\n`\n    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)\n    const isDefaultPlugin = bady.pluginName == `default-site-plugin`\n    const badExportsMigrationMap = {\n      modifyWebpackConfig: {\n        replacement: `onCreateWebpackConfig`,\n        migrationLink: `https://gatsby.app/update-webpack-config`,\n      },\n      wrapRootComponent: {\n        replacement: `wrapRootElement`,\n        migrationLink: `https://gatsby.app/update-wraprootcomponent`,\n      },\n    }\n    const isOldAPI = Object.keys(badExportsMigrationMap).includes(\n      bady.exportName\n    )\n\n    if (isDefaultPlugin && isOldAPI) {\n      const { replacement, migrationLink } = badExportsMigrationMap[\n        bady.exportName\n      ]\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting \"${\n        bady.exportName\n      }\" which was removed in Gatsby v2. Refer to the migration guide for more info on upgrading to \"${replacement}\":\n      `\n      message += `\\n ${migrationLink}`\n    } else if (isDefaultPlugin) {\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.\n      `\n    } else {\n      message += stripIndent`\n        - The plugin \"${bady.pluginName}@${\n        bady.pluginVersion\n      }\" is exporting a variable named \"${bady.exportName}\" which isn't an API.\n      `\n    }\n\n    if (similarities.bestMatch.rating > 0.5 && !isOldAPI) {\n      message += `\\n\\n`\n      message += `Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nconst handleBadExports = ({ apis, badExports }) => {\n  // Output error messages for all bad exports\n  let isBad = false\n  _.toPairs(badExports).forEach(badItem => {\n    const [exportType, entries] = badItem\n    if (entries.length > 0) {\n      isBad = true\n      console.log(getBadExportsMessage(entries, exportType, apis[exportType]))\n    }\n  })\n  return isBad\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nconst collatePluginAPIs = ({ apis, flattenedPlugins }) => {\n  const allAPIs = [...apis.node, ...apis.browser, ...apis.ssr]\n  const apiToPlugins = allAPIs.reduce((acc, value) => {\n    acc[value] = []\n    return acc\n  }, {})\n\n  // Get a list of bad exports\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)\n      plugin.nodeAPIs.map(nodeAPI => apiToPlugins[nodeAPI].push(plugin.name))\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, apis.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)\n      plugin.browserAPIs.map(browserAPI =>\n        apiToPlugins[browserAPI].push(plugin.name)\n      )\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, apis.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)\n      plugin.ssrAPIs.map(ssrAPI => apiToPlugins[ssrAPI].push(plugin.name))\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, apis.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return { apiToPlugins, flattenedPlugins, badExports }\n}\n\nconst handleMultipleReplaceRenderers = ({ apiToPlugins, flattenedPlugins }) => {\n  // multiple replaceRenderers may cause problems at build time\n  if (apiToPlugins.replaceRenderer.length > 1) {\n    const rendererPlugins = [...apiToPlugins.replaceRenderer]\n\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${\n            fp.name\n          }`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nmodule.exports = {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n}\n"],"file":"validate.js"}