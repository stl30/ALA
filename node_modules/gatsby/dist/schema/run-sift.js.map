{"version":3,"sources":["../../src/schema/run-sift.js"],"names":["sift","require","_","connectionFromArray","createPageDependency","prepareRegex","Promise","trackInlineObjectsInRootNode","getNode","resolvedNodesCache","Map","enhancedNodeCache","enhancedNodePromiseCache","enhancedNodeCacheId","node","args","internal","contentDigest","JSON","stringify","nodeid","id","digest","awaitSiftField","fields","k","field","resolve","fieldName","undefined","module","exports","nodes","type","typeName","connection","path","clonedArgs","parse","siftifyArgs","object","newObject","each","v","isPlainObject","Minimatch","mm","makeRe","extractFieldsToSift","prekey","key","preobj","obj","val","forEach","siftArgs","fieldsToSift","filter","includes","push","resolveRecursive","siftFieldsObj","gqFields","all","keys","map","then","innerSift","innerGqConfig","isObject","isFunction","getFields","resolvedFields","myNode","Object","length","nodePromise","nodeId","nodesPromise","nodesCacheKey","nodesLength","process","env","NODE_ENV","has","get","cacheKey","enhancedNodeGenerationPromise","resolvedNode","set","resolvedNodes","tempPromise","myNodes","index","isEmpty","indexOf","$and","result","sort","convertedFields","replace","orderBy","order","connectionArray","totalCount"],"mappings":"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","sourcesContent":["// @flow\nconst sift = require(`sift`)\nconst _ = require(`lodash`)\nconst { connectionFromArray } = require(`graphql-skip-limit`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst prepareRegex = require(`./prepare-regex`)\nconst Promise = require(`bluebird`)\nconst { trackInlineObjectsInRootNode } = require(`./node-tracking`)\nconst { getNode } = require(`../redux`)\n\nconst resolvedNodesCache = new Map()\nconst enhancedNodeCache = new Map()\nconst enhancedNodePromiseCache = new Map()\nconst enhancedNodeCacheId = ({ node, args }) =>\n  node && node.internal && node.internal.contentDigest\n    ? JSON.stringify({\n        nodeid: node.id,\n        digest: node.internal.contentDigest,\n        ...args,\n      })\n    : null\n\nfunction awaitSiftField(fields, node, k) {\n  const field = fields[k]\n  if (field.resolve) {\n    return field.resolve(\n      node,\n      {},\n      {},\n      {\n        fieldName: k,\n      }\n    )\n  } else if (node[k] !== undefined) {\n    return node[k]\n  }\n\n  return undefined\n}\n\n/*\n * Filters a list of nodes using mongodb-like syntax.\n * Returns a single unwrapped element if connection = false.\n *\n */\nmodule.exports = ({\n  args,\n  nodes,\n  type,\n  typeName,\n  connection = false,\n  path = ``,\n}: Object) => {\n  // Clone args as for some reason graphql-js removes the constructor\n  // from nested objects which breaks a check in sift.js.\n  const clonedArgs = JSON.parse(JSON.stringify(args))\n\n  const siftifyArgs = object => {\n    const newObject = {}\n    _.each(object, (v, k) => {\n      if (_.isPlainObject(v)) {\n        if (k === `elemMatch`) {\n          k = `$elemMatch`\n        }\n        newObject[k] = siftifyArgs(v)\n      } else {\n        // Compile regex first.\n        if (k === `regex`) {\n          newObject[`$regex`] = prepareRegex(v)\n        } else if (k === `glob`) {\n          const Minimatch = require(`minimatch`).Minimatch\n          const mm = new Minimatch(v)\n          newObject[`$regex`] = mm.makeRe()\n        } else {\n          newObject[`$${k}`] = v\n        }\n      }\n    })\n    return newObject\n  }\n\n  // Build an object that excludes the innermost leafs,\n  // this avoids including { eq: x } when resolving fields.\n  function extractFieldsToSift(prekey, key, preobj, obj, val) {\n    if (_.isPlainObject(val)) {\n      _.forEach((val: any), (v, k) => {\n        preobj[prekey] = obj\n        extractFieldsToSift(key, k, obj, {}, v)\n      })\n    } else {\n      preobj[prekey] = true\n    }\n  }\n\n  const siftArgs = []\n  const fieldsToSift = {}\n  if (clonedArgs.filter) {\n    _.each(clonedArgs.filter, (v, k) => {\n      // Ignore connection and sorting args.\n      if (_.includes([`skip`, `limit`, `sort`], k)) return\n\n      siftArgs.push(\n        siftifyArgs({\n          [k]: v,\n        })\n      )\n      extractFieldsToSift(``, k, {}, fieldsToSift, v)\n    })\n  }\n\n  // Resolves every field used in the node.\n  function resolveRecursive(node, siftFieldsObj, gqFields) {\n    return Promise.all(\n      _.keys(siftFieldsObj).map(k =>\n        Promise.resolve(awaitSiftField(gqFields, node, k))\n          .then(v => {\n            const innerSift = siftFieldsObj[k]\n            const innerGqConfig = gqFields[k]\n            if (\n              _.isObject(innerSift) &&\n              v != null &&\n              innerGqConfig &&\n              innerGqConfig.type &&\n              _.isFunction(innerGqConfig.type.getFields)\n            ) {\n              return resolveRecursive(\n                v,\n                innerSift,\n                innerGqConfig.type.getFields()\n              )\n            } else {\n              return v\n            }\n          })\n          .then(v => [k, v])\n      )\n    ).then(resolvedFields => {\n      const myNode = {\n        ...node,\n      }\n      resolvedFields.forEach(([k, v]) => (myNode[k] = v))\n      return myNode\n    })\n  }\n\n  // If the the query only has a filter for an \"id\", then we'll just grab\n  // that ID and return it.\n  if (\n    Object.keys(fieldsToSift).length === 1 &&\n    Object.keys(fieldsToSift)[0] === `id`\n  ) {\n    const nodePromise = resolveRecursive(\n      getNode(siftArgs[0].id[`$eq`]),\n      fieldsToSift,\n      type.getFields()\n    )\n\n    nodePromise.then(node => {\n      if (node) {\n        createPageDependency({\n          path,\n          nodeId: node.id,\n        })\n      }\n    })\n\n    return nodePromise\n  }\n\n  const nodesPromise = () => {\n    const nodesCacheKey = JSON.stringify({\n      // typeName + count being the same is a pretty good\n      // indication that the nodes are the same.\n      typeName,\n      nodesLength: nodes.length,\n      ...fieldsToSift,\n    })\n    if (\n      process.env.NODE_ENV === `production` &&\n      resolvedNodesCache.has(nodesCacheKey)\n    ) {\n      return Promise.resolve(resolvedNodesCache.get(nodesCacheKey))\n    } else {\n      return Promise.all(\n        nodes.map(node => {\n          const cacheKey = enhancedNodeCacheId({\n            node,\n            args: fieldsToSift,\n          })\n          if (cacheKey && enhancedNodeCache.has(cacheKey)) {\n            return Promise.resolve(enhancedNodeCache.get(cacheKey))\n          } else if (cacheKey && enhancedNodePromiseCache.has(cacheKey)) {\n            return enhancedNodePromiseCache.get(cacheKey)\n          }\n\n          const enhancedNodeGenerationPromise = new Promise(resolve => {\n            resolveRecursive(node, fieldsToSift, type.getFields()).then(\n              resolvedNode => {\n                trackInlineObjectsInRootNode(resolvedNode)\n                if (cacheKey) {\n                  enhancedNodeCache.set(cacheKey, resolvedNode)\n                }\n                resolve(resolvedNode)\n              }\n            )\n          })\n          enhancedNodePromiseCache.set(cacheKey, enhancedNodeGenerationPromise)\n          return enhancedNodeGenerationPromise\n        })\n      ).then(resolvedNodes => {\n        resolvedNodesCache.set(nodesCacheKey, resolvedNodes)\n        return resolvedNodes\n      })\n    }\n  }\n  const tempPromise = nodesPromise().then(myNodes => {\n    if (!connection) {\n      const index = _.isEmpty(siftArgs)\n        ? 0\n        : sift.indexOf(\n            {\n              $and: siftArgs,\n            },\n            myNodes\n          )\n\n      // If a node is found, create a dependency between the resulting node and\n      // the path.\n      if (index !== -1) {\n        createPageDependency({\n          path,\n          nodeId: myNodes[index].id,\n        })\n\n        return myNodes[index]\n      } else {\n        return null\n      }\n    }\n\n    let result = _.isEmpty(siftArgs)\n      ? myNodes\n      : sift(\n          {\n            $and: siftArgs,\n          },\n          myNodes\n        )\n\n    if (!result || !result.length) return null\n\n    // Sort results.\n    if (clonedArgs.sort) {\n      // create functions that return the item to compare on\n      // uses _.get so nested fields can be retrieved\n      const convertedFields = clonedArgs.sort.fields\n        .map(field => field.replace(/___/g, `.`))\n        .map(field => v => _.get(v, field))\n\n      result = _.orderBy(result, convertedFields, clonedArgs.sort.order)\n    }\n\n    const connectionArray = connectionFromArray(result, args)\n    connectionArray.totalCount = result.length\n    if (result.length > 0 && result[0].internal) {\n      createPageDependency({\n        path,\n        connection: result[0].internal.type,\n      })\n    }\n    return connectionArray\n  })\n\n  return tempPromise\n}\n"],"file":"run-sift.js"}