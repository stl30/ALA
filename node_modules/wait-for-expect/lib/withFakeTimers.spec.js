"use strict";

require("./toBeInRangeMatcher");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

// this is a copy of "it waits for expectation to pass" modified to use jestFakeTimers
// This breakes when we remove the const { setTimeout } = typeof window !== "undefined" ? window : global;
// line from the index.ts
test("it works even if the timers are overwritten by jest",
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var numberToChange, randomTimeout;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          jest.useFakeTimers();
          numberToChange = 10; // we are using random timeout here to simulate a real-time example
          // of an async operation calling a callback at a non-deterministic time

          randomTimeout = Math.floor(Math.random() * 300);
          setTimeout(function () {
            numberToChange = 100;
          }, randomTimeout);
          jest.runAllTimers();
          _context.next = 7;
          return (0, _index.default)(function () {
            expect(numberToChange).toEqual(100);
          });

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));